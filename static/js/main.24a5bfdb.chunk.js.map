{"version":3,"sources":["components/Form.js","components/LocationDate.js","components/CurrentTemp.js","components/CurrentStats.js","components/NextDays.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","className","type","value","onChange","change","placeholder","monthNames","weekDay","LocationDate","_props$locationDate","locationDate","city","country","currentTime","hour","toLocaleTimeString","timeStyle","dayName","getDay","monthName","getMonth","monthDay","getDate","CurrentTemp","_props$weather","weather","icon","temp","description","iconURL","concat","src","alt","CurrentStats","tempMax","tempMin","wind","pressure","sunrise","sunset","sunriseTime","Date","sunsetTime","NextDays","days","forecast","slice","map","day","index","d","dt","dayNumber","key","Math","round","min","max","wind_speed","APIKey","APIBaseUrl","App","state","err","err2","currentWeather","debounceTimeout","handleInputChange","e","_this","setState","target","handleForecastCall","coords","_ref","lat","lon","fetch","then","response","ok","Error","json","data2","daily","Object","toConsumableArray","catch","console","log","prevState","handleLocalizationCall","data","time","sys","main","temp_max","temp_min","speed","coord","prevProps","_this2","this","length","clearTimeout","setTimeout","result","Fragment","src_components_LocationDate","error","src_components_CurrentTemp","src_components_CurrentStats","src_components_NextDays","empty","src_components_Form","handleCitySubmit","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24a5bfdb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <input\r\n        className=\"form-input\"\r\n        type=\"search\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n        placeholder=\"City name...\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './LocationDate.css';\r\n\r\nconst monthNames = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\nconst weekDay = ['Sunday', 'Monday', 'Tueasday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nconst LocationDate = (props) => {\r\n  const { city, country, currentTime } = props.locationDate;\r\n  const hour = currentTime.toLocaleTimeString([], { timeStyle: 'short' });\r\n  const dayName = weekDay[currentTime.getDay()];\r\n  const monthName = monthNames[currentTime.getMonth()];\r\n  const monthDay = currentTime.getDate();\r\n\r\n  return (\r\n    <section className=\"location\">\r\n      <h1 className=\"location--city-country\">\r\n        {city}, {country}\r\n      </h1>\r\n      <div className=\"location--date\">\r\n        {dayName} {monthDay}th {monthName}, {hour}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default LocationDate;\r\n","import React from 'react';\r\nimport './CurrentTemp.css';\r\n\r\nconst CurrentTemp = (props) => {\r\n  const { icon, temp, description } = props.weather;\r\n  const iconURL = `http://openweathermap.org/img/wn/${icon}@2x.png`;\r\n\r\n  return (\r\n    <section className=\"current-temp\">\r\n      <div className=\"current-temp--icon\">\r\n        <img className=\"current-temp--icon-img\" src={iconURL} alt={description} />\r\n      </div>\r\n      <div className=\"current-temp--temp\">\r\n        <p className=\"current-temp--deg\">{temp}&deg;</p>\r\n        <p className=\"current-temp--desc\">{description}</p>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default CurrentTemp;\r\n","import React from 'react';\r\nimport './CurrentStats.css';\r\nconst CurrentStats = (props) => {\r\n  const { tempMax, tempMin, wind, pressure, sunrise, sunset } = props.weather;\r\n  const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString([], { timeStyle: 'short' });\r\n  const sunsetTime = new Date(sunset * 1000).toLocaleTimeString([], { timeStyle: 'short' });\r\n  return (\r\n    <section className=\"current-stats\">\r\n      <div>\r\n        <div className=\"current-stats--value\">{tempMax}&deg;</div>\r\n        <div className=\"current-stats--desc\">High</div>\r\n        <div className=\"current-stats--value\">{tempMin}&deg;</div>\r\n        <div className=\"current-stats--desc\">Low</div>\r\n      </div>\r\n      <div>\r\n        <div className=\"current-stats--value\">\r\n          {wind}\r\n          <span>m/s</span>\r\n        </div>\r\n        <div className=\"current-stats--desc\">Wind</div>\r\n        <div className=\"current-stats--value\">\r\n          {pressure}\r\n          <span>hPa</span>\r\n        </div>\r\n        <div className=\"current-stats--desc\">Pressure</div>\r\n      </div>\r\n      <div>\r\n        <div className=\"current-stats--value\">{sunriseTime}</div>\r\n        <div className=\"current-stats--desc\">Sunrise</div>\r\n        <div className=\"current-stats--value\">{sunsetTime}</div>\r\n        <div className=\"current-stats--desc\">Sunset</div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default CurrentStats;\r\n\r\n","import React from 'react';\r\nimport './NextDays.css';\r\n\r\nconst monthNames = [\r\n  'Jan',\r\n  'Feb',\r\n  'Mar',\r\n  'Apr',\r\n  'May',\r\n  'Jun',\r\n  'Jul',\r\n  'Aug',\r\n  'Sep',\r\n  'Oct',\r\n  'Nov',\r\n  'Dec',\r\n];\r\n\r\nconst weekDay = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\nconst NextDays = (props) => {\r\n  const days = props.forecast.days.slice(1, 6).map((day, index) => {\r\n    const d = new Date(day.dt * 1000);\r\n    const dayNumber = d.getDate();\r\n    const monthName = monthNames[d.getMonth()];\r\n    const dayName = weekDay[d.getDay()];\r\n    const iconURL = `http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`;\r\n    const description = `${day.weather[0].description}`;\r\n\r\n    return (\r\n      <div key={index}>\r\n        <div className=\"next-days--day\">\r\n          <div className=\"next-days--tile date\">\r\n            <p className=\"next-days--value\">{dayName}</p>\r\n            <p className=\"next-days--desc\">\r\n              {dayNumber} {monthName}{' '}\r\n            </p>\r\n          </div>\r\n          <div className=\"next-days--tile low-temp\">\r\n            <p className=\"next-days--value\">{Math.round(day.temp.min)}&deg;</p>\r\n            <p className=\"next-days--desc\">Low</p>\r\n          </div>\r\n          <div className=\"next-days--tile high-temp\">\r\n            <p className=\"next-days--value\">{Math.round(day.temp.max)}&deg;</p>\r\n            <p className=\"next-days--desc\">High</p>\r\n          </div>\r\n          <div className=\"next-days--tile forecast-icon\">\r\n            <p className=\"next-days--value\">\r\n              <img className=\"next-days--icon\" src={iconURL} alt={description} />\r\n            </p>\r\n          </div>\r\n          <div className=\"next-days--tile pressure\">\r\n            <p className=\"next-days--value\">{day.pressure}hPa</p>\r\n            <p className=\"next-days--desc\">Pressure</p>\r\n          </div>\r\n          <div className=\"next-days--tile wind\">\r\n            <p className=\"next-days--value\">{Math.round(day.wind_speed)}m/s</p>\r\n            <p className=\"next-days--desc\">Wind</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section className=\"next-days\">\r\n      <h2>Next 5 days</h2>\r\n      {days}\r\n    </section>\r\n  );\r\n};\r\nexport default NextDays;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Form from './Form';\r\n// import Result from './Result';\r\nimport LocationDate from './LocationDate';\r\nimport CurrentTemp from './CurrentTemp';\r\nimport CurrentStats from './CurrentStats';\r\nimport NextDays from './NextDays';\r\nconst APIKey = 'cd89e16113fe3e44eacf3e7726ef8614';\r\nconst APIBaseUrl = 'https://api.openweathermap.org/data/2.5/';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    value: '',\r\n    err: '',\r\n    err2: '',\r\n\r\n    locationDate: {\r\n      currentTime: new Date(),\r\n      city: '',\r\n      country: '',\r\n    },\r\n    currentWeather: {\r\n      sunrise: '',\r\n      sunset: '',\r\n      temp: '',\r\n      tempMax: '',\r\n      tempMin: '',\r\n      pressure: '',\r\n      wind: '',\r\n      icon: '',\r\n      description: '',\r\n    },\r\n\r\n    forecast: {\r\n      days: [],\r\n    },\r\n  };\r\n  debounceTimeout = 0;\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      value: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleForecastCall = (coords) => {\r\n    const { lat, lon } = coords || {};\r\n\r\n    if (!(lat && lon)) {\r\n      return;\r\n    }\r\n\r\n    fetch(\r\n      `${APIBaseUrl}onecall?lat=${lat}&lon=${lon}&exclude=minutely&appid=${APIKey}&units=metric&lang=en`\r\n    )\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        throw Error(`Fail. Didn't find the city:\"${this.state.value}\"`);\r\n      })\r\n      .then((response) => response.json())\r\n      .then((data2) => {\r\n        const days = data2.daily;\r\n        this.setState({\r\n          err: false,\r\n          forecast: {\r\n            days: [...days],\r\n          },\r\n        });\r\n      })\r\n      .catch((err2) => {\r\n        console.log('error2');\r\n        this.setState((prevState) => ({\r\n          err2: true,\r\n        }));\r\n      });\r\n  };\r\n\r\n  handleLocalizationCall = () =>\r\n    fetch(`${APIBaseUrl}weather?q=${this.state.value}&appid=${APIKey}&units=metric`)\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        throw Error(`Fail. Didn't find the city:\"${this.state.value}\"`);\r\n      })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const time = new Date();\r\n        this.setState((prevState) => ({\r\n          err: false,\r\n          locationDate: {\r\n            currentTime: time,\r\n            city: prevState.value,\r\n            country: data.sys.country,\r\n          },\r\n          currentWeather: {\r\n            sunrise: data.sys.sunrise,\r\n            sunset: data.sys.sunset,\r\n            temp: Math.round(data.main.temp),\r\n            tempMax: Math.round(data.main.temp_max),\r\n            tempMin: Math.round(data.main.temp_min),\r\n            pressure: data.main.pressure,\r\n            wind: Math.round(data.wind.speed),\r\n            icon: data.weather[0].icon,\r\n            description: data.weather[0].description,\r\n          },\r\n        }));\r\n        return {\r\n          lat: data.coord.lat,\r\n          lon: data.coord.lon,\r\n        };\r\n      })\r\n      .catch((err) => {\r\n        console.log('error1');\r\n        this.setState((prevState) => ({\r\n          err: true,\r\n          currentWeather: {\r\n            city: prevState.value,\r\n          },\r\n        }));\r\n      });\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.value.length < 2 && this.state.value.length !== 0) return;\r\n    if (prevState.value !== this.state.value) {\r\n      clearTimeout(this.debounceTimeout);\r\n      this.debounceTimeout = setTimeout(\r\n        () => this.handleLocalizationCall().then(this.handleForecastCall),\r\n        250\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let result = null;\r\n    if (!this.state.err && this.state.locationDate.city) {\r\n      result = (\r\n        <>\r\n          <LocationDate locationDate={this.state.locationDate} error={this.state.err} />\r\n          <CurrentTemp weather={this.state.currentWeather} />\r\n          <CurrentStats weather={this.state.currentWeather} />\r\n          <NextDays locationDate={this.state.locationDate} forecast={this.state.forecast} />\r\n        </>\r\n      );\r\n    }\r\n\r\n    let empty = null;\r\n    if (this.state.value) {\r\n      empty = (\r\n        <div className=\"display-no-city\">\r\n          In our database there is no city: <strong>{this.state.value}</strong>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <Form\r\n          value={this.state.value}\r\n          change={this.handleInputChange}\r\n          submit={this.handleCitySubmit}\r\n        />\r\n        {this.state.err ? empty : result}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n// Sprawdzić head Html. scaling itd\r\n//\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}